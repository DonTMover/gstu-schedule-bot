import os
import json
import psycopg2
from psycopg2.extras import execute_values
from dotenv import load_dotenv
from pathlib import Path

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv("app/.env")
DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    raise RuntimeError("DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# --- –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º ---
teachers_file = Path("teachers.json")
users_file = Path("db.json")

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL ---
conn = psycopg2.connect(DATABASE_URL)
cur = conn.cursor()

# --- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ ---
cur.execute("""
-- –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
CREATE TABLE IF NOT EXISTS users (
    id BIGINT PRIMARY KEY,
    group_name TEXT,
    subgroup INT DEFAULT 1
);

-- –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
CREATE TABLE IF NOT EXISTS teachers (
    id SERIAL PRIMARY KEY,
    full_name TEXT NOT NULL,
    slug TEXT UNIQUE NOT NULL,
    hash CHAR(32) NOT NULL,
    average REAL DEFAULT 0.0
);

-- –¢–∞–±–ª–∏—Ü–∞ –æ—Ü–µ–Ω–æ–∫
CREATE TABLE IF NOT EXISTS grades (
    id SERIAL PRIMARY KEY,
    teacher_id INT NOT NULL REFERENCES teachers(id) ON DELETE CASCADE,
    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    grade INT NOT NULL,
    CONSTRAINT grades_teacher_user_unique UNIQUE (teacher_id, user_id)
);
""")

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–π –∫–æ–ª–æ–Ω–∫–∏ subgroup (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç) ---
cur.execute("""
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name = 'users' AND column_name = 'subgroup'
    ) THEN
        ALTER TABLE users ADD COLUMN subgroup INT DEFAULT 1;
        UPDATE users SET subgroup = 1; -- –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
    END IF;
END$$;
""")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ teachers.json ---
if teachers_file.exists():
    with open(teachers_file, "r", encoding="utf-8") as f:
        teachers = json.load(f)

    teachers_data = [
        (name, data["slug"], data["hash"], data.get("average", 0.0))
        for name, data in teachers.items()
    ]

    execute_values(
        cur,
        """
        INSERT INTO teachers (full_name, slug, hash, average)
        VALUES %s
        ON CONFLICT (slug) DO NOTHING
        """,
        teachers_data
    )
    print(f"‚úÖ –ó–∞–ª–∏—Ç–æ {len(teachers_data)} –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
else:
    print("‚ö† teachers.json –Ω–µ –Ω–∞–π–¥–µ–Ω")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ db.json ---
if users_file.exists():
    with open(users_file, "r", encoding="utf-8") as f:
        users = json.load(f)

    users_data = [(int(uid), group, 1) for uid, group in users.items()]

    execute_values(
        cur,
        """
        INSERT INTO users (id, group_name, subgroup)
        VALUES %s
        ON CONFLICT (id) DO UPDATE 
        SET group_name = EXCLUDED.group_name,
            subgroup = COALESCE(users.subgroup, EXCLUDED.subgroup)
        """,
        users_data
    )
    print(f"‚úÖ –ó–∞–ª–∏—Ç–æ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
else:
    print("‚ö† db.json –Ω–µ –Ω–∞–π–¥–µ–Ω")

conn.commit()
cur.close()
conn.close()

print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
