# load environment variables
from dotenv import load_dotenv
from os import getenv

# other imports
import re
from api import get_schedule
from groupes import groups
from loguru import logger
import hashlib


# aiogram imports
from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram import F
from aiogram.types import Message
from aiogram import types
from aiogram.types import InlineQuery
from aiogram.methods import EditMessageText

# from packages
from utils import (get_inline_keyboard_select, get_days_keyboard, get_inline_keyboard_disclaimer,
                   handle_group_search, handle_teacher_inline_search,get_teacher_rating_keyboard, handle_teacher_inline_search_names)
from api import get_human_readable_schedule, fetch_schedule_cached, get_teacher_schedule_cached
from db import db
from cache import cache


load_dotenv()
TOKEN = getenv("BOT_TOKEN")

dp = Dispatcher()

#add logging
logger.add("bot.log", rotation="10 MB", retention="30 days", level="INFO")

@dp.message(CommandStart()) # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —á–µ–ª–∞ –≤ –≥—Ä—É–ø–ø—É
async def start(message: Message):
    logger.info(f"User {message.from_user.id} started bot")
    await message.answer( # TODO: –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥–∏–∫—Å–ª–µ–π–º–µ—Ä –µ—â–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥–∏—Ç—Ö–∞–±
        text="–ü—Ä–∏–≤–µ—Ç, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—á—Ç–∏ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä. \n\n–≠—Ç–æ—Ç –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –ì–ì–¢–£ –∏ –Ω–µ —Å–≤—è–∑–∞–Ω —Å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–º. \n\n–ê–≤—Ç–æ—Ä –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏. \n\n–ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ—Ç –±–æ—Ç, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —Ç–µ–º, —á—Ç–æ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è '–∫–∞–∫ –µ—Å—Ç—å' –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –≥–∞—Ä–∞–Ω—Ç–∏–π. \n\n–ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —ç—Ç–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –±–æ—Ç.",
        reply_markup=get_inline_keyboard_disclaimer()
    )

@dp.message()  # –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Å–µ
async def handler(message: Message):
    text = message.text.strip()
    logger.info(f"Received message: {text} from user {message.from_user.id}")

    # —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    if text.lower() == "/test_get_id":
        await message.answer(f"–í–∞—à ID: {message.from_user.id}")
        return

    # 1. –ì–†–£–ü–ü–´
    match_group = re.search(r"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É: (\S+)", text)
    logger.info(f"Regex match for group: {match_group}")
    if match_group:
        group_code = match_group.group(1)

        await db.set_group(message.from_user.id, group_code)
        logger.info(f"Database updated for user {message.from_user.id} with group {group_code}")

        if group_code in groups:
            logger.info(f"User {message.from_user.id} selected valid group {group_code}")
            await message.answer(
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.",
                reply_markup=get_days_keyboard()
            )
        return

    # 2. –†–ï–ô–¢–ò–ù–ì –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ï–ô
    match_teacher_rating = re.search(
        r"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: (.+)\n‚≠ê\s*–†–µ–π—Ç–∏–Ω–≥: ([0-5](?:\.[0-9]{1,2})?)/5",
        text
    )
    if match_teacher_rating:
        fullname = match_teacher_rating.group(1)
        current_rating = match_teacher_rating.group(2)
        logger.info(f"User {message.from_user.id} viewing teacher {fullname} with rating {current_rating}")

        if await db.user_exists(message.from_user.id):
            await db.ensure_user(message.from_user.id)
            await message.answer(
                text=f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {fullname}\n‚≠ê –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {current_rating}/5",
                reply_markup=await get_teacher_rating_keyboard(fullname)
            )
        else:
            await message.answer(
                text="–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start",
                reply_markup=get_inline_keyboard_select()
            )
        return

    # 3. –†–ê–°–ü–ò–°–ê–ù–ò–ï –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ï–ô
    match_teacher_schedule = re.search(
        r"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: (.+)$",  # —Ç–æ–ª—å–∫–æ –§–ò–û
        text
    )
    if match_teacher_schedule:
        fullname = match_teacher_schedule.group(1)
        logger.info(f"User {message.from_user.id} selected teacher {fullname} to view schedule")

        if await db.user_exists(message.from_user.id):
            await db.ensure_user(message.from_user.id)

            # –∑–∞–≥–ª—É—à–∫–∞ –ø–æ–¥ –±—É–¥—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
            try:
                teacher_schedule = await get_teacher_schedule_cached(fullname)  # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
            except NameError:
                teacher_schedule = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."

            await message.answer(
                text=f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {fullname}\n\n{teacher_schedule}",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                text="–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start",
                reply_markup=get_inline_keyboard_select()
            )
        return



@dp.callback_query(lambda c: c.data == "search") # –î–ª—è InlineSearch –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã
async def process_search(callback_query):
    await callback_query.message.answer("Please enter the group code (e.g., –ê–ü-11):")
    await callback_query.answer()
    
@dp.callback_query(lambda c: c.data == "disclaimer:accept") # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –¥–∏—Å–∫–ª–µ–π–º–µ—Ä–∞
async def process_disclaimer(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        text="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —É—Å–ª–æ–≤–∏–π. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É.",
        reply_markup=get_inline_keyboard_select()
    )
    await callback_query.answer("–í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—Å–ª–æ–≤–∏—è.")

# @dp.message(Command("schedule"))
# async def schedule_cmd(message: types.Message):
#     await message.answer(
#         "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
#         reply_markup=get_days_keyboard()
#     )

@dp.message(Command("test_get_id")) # —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ø–∞–≤—à–∞—è –Ω–∞ –ø—Ä–æ–¥ :3
async def schedule_cmd(message: types.Message):
    await message.answer(f"–í–∞—à ID: {message.from_user.id}")

@dp.inline_query()
async def inline_handler(inline_query: types.InlineQuery):
    query = inline_query.query.strip()
    results = []

    if query.startswith("teacher:"):
        results = await handle_teacher_inline_search(query.replace("teacher:", "").strip())

    elif query.startswith("group:"):
        results = handle_group_search(query.replace("group:", "").strip())

    elif query.startswith("teacher_schedule:"):
        results = await handle_teacher_inline_search_names(query.replace("teacher_schedule:", "").strip())

    await inline_query.answer(results, cache_time=1)

@dp.callback_query(F.data.startswith("rate:")) # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–æ–∫
async def rate_teacher(callback: types.CallbackQuery):
    _, hash_id, value_str = callback.data.split(":")
    value = int(value_str)

    # –ù–∞—Ö–æ–¥–∏–º –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ —Ö–µ—à—É —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
    name = await db.get_teacher_name_by_hash(hash_id)
    if not name:
        await callback.answer("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    avg, count = await db.add_teacher_rating(name, value, callback.from_user.id)

    text = f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {name}\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {avg:.2f}/5\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {count}"
    keyboard = await get_teacher_rating_keyboard(name)

    if callback.message:  # –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(text, reply_markup=keyboard)
    elif callback.inline_message_id:  # inline-—Å–æ–æ–±—â–µ–Ω–∏–µ
        await EditMessageText(
            text=text,
            inline_message_id=callback.inline_message_id,
            reply_markup=keyboard,
            parse_mode="HTML"
        ).send(callback.bot)

    await callback.answer(f"–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ {value}‚≠ê!")


@dp.callback_query(lambda c: c.data == "comeback") # –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É
async def comeback(callback: types.CallbackQuery):
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª.",
        reply_markup=get_inline_keyboard_select()
    )
    await callback.answer()




# @dp.callback_query(F.data.startswith("day:")) # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# async def day_schedule(callback: types.CallbackQuery):
#     code = callback.data.split(":")[1]   # MONDAY, TUESDAY ...
#     day_name = days_map[code]
#     try:
#         if not await db.get_group(callback.from_user.id):
#             await callback.message.edit_text(
#                 "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start",
#                 reply_markup=get_inline_keyboard_select()
#             )
#             await callback.answer()
#             return
#     except Exception as e:
#         logger.error(f"Error fetching group for user {callback.from_user.id}: {e}")
#         await callback.message.edit_text(
#             "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
#             reply_markup=get_inline_keyboard_select()
#         )
#         await callback.answer()
#         return
    
#     schedule = get_human_readable_schedule(await fetch_schedule_cached(await db.get_group(callback.from_user.id)))  
#     lessons = schedule[day_name]
#     logger.info(f"Fetched schedule for user {callback.from_user.id} for {day_name}")

#     if not lessons:
#         text = f"üìÖ {day_name}\n\n–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç üéâ"
#     else:
#         parts = [f"üìÖ {day_name}\n"]
#         for i, lesson in enumerate(lessons, 1):
#             parts.append(
#                 f"<b>{lesson['lessonNumber']}. {lesson['subject']}</b> ({lesson['subjectShort'] or ''})\n"
#                 f"üïí {lesson['startTime']} ‚Äì {lesson['endTime']}\n"
#                 f"üë®‚Äçüè´ {lesson['teachers'] or '-'}\n"
#                 f"üè´ {lesson['classrooms'] or '-'}\n"
#                 f"üë• {lesson['groups'] or '-'}\n"
#             )
#         text = "\n".join(parts)

#     await callback.message.edit_text(
#         text,
#         reply_markup=get_days_keyboard(),
#         parse_mode="HTML"
#     )
#     await callback.answer()


@dp.callback_query(F.data.startswith("day:"))  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async def day_schedule(callback: types.CallbackQuery):
    code = callback.data.split(":")[1]   # 'MONDAY', 'TUESDAY', ...
    days_map = {
        "MONDAY": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "TUESDAY": "–í—Ç–æ—Ä–Ω–∏–∫",
        "WEDNESDAY": "–°—Ä–µ–¥–∞",
        "THURSDAY": "–ß–µ—Ç–≤–µ—Ä–≥",
        "FRIDAY": "–ü—è—Ç–Ω–∏—Ü–∞",
        "SATURDAY": "–°—É–±–±–æ—Ç–∞",
        "SUNDAY": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    }
    day_name = days_map.get(code, code)

    try:
        user_group = await db.get_group(callback.from_user.id)
        if not user_group:
            await callback.message.edit_text(
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start",
                reply_markup=get_inline_keyboard_select()
            )
            await callback.answer()
            return
    except Exception as e:
        logger.error(f"Error fetching group for user {callback.from_user.id}: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_inline_keyboard_select()
        )
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¢–ï–ö–£–©–£–Æ –Ω–µ–¥–µ–ª—é (—Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ startDate —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç date/weekType)
    raw = await fetch_schedule_cached(user_group)
    schedule = get_human_readable_schedule(raw)
    lessons = schedule.get(day_name, [])
    logger.info(f"Fetched schedule for user {callback.from_user.id} for {day_name}")

    # –û–ø—Ä–µ–¥–µ–ª–∏–º –¥–∞—Ç—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –∏ —á—ë—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    # (–±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã; –µ—Å–ª–∏ –ø–∞—Ä –Ω–µ—Ç ‚Äî –≤—ã—á–∏—Å–ª–∏–º –¥–∞—Ç—É —ç—Ç–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –æ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞)
    from datetime import date, timedelta
    if lessons:
        day_date_iso = lessons[0].get("date")  # 'YYYY-MM-DD'
        week_type = lessons[0].get("weekType") or "-"
    else:
        today = date.today()
        monday = today - timedelta(days=today.weekday())
        shift = ["MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY"].index(code)
        day_date_iso = (monday + timedelta(days=shift)).isoformat()
        week_type = "EVEN" if today.isocalendar().week % 2 == 0 else "ODD"

    # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç—ã
    try:
        from datetime import datetime as _dt
        day_date_str = _dt.fromisoformat(day_date_iso).strftime("%d.%m.%Y")
    except Exception:
        day_date_str = day_date_iso

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
    def t(v: str | None) -> str:
        # –æ–∂–∏–¥–∞–µ–º 'HH:MM:SS' –∏–ª–∏ 'HH:MM'
        if not v:
            return "-"
        return v[:5]  # 'HH:MM'

    if not lessons:
        text = f"üìÖ {day_name}, {day_date_str}  ‚Ä¢  –ù–µ–¥–µ–ª—è: <b>{week_type}</b>\n\n–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç üéâ"
    else:
        parts = [f"üìÖ {day_name}, {day_date_str}  ‚Ä¢  –ù–µ–¥–µ–ª—è: <b>{week_type}</b>\n"]
        for i, lesson in enumerate(lessons, 1):
            parts.append(
                f"<b>{lesson.get('lessonNumber')}. {lesson.get('subject') or '‚Äî'}</b>"
                f" ({lesson.get('subjectShort') or ''})\n"
                f"üïí {t(lesson.get('startTime'))} ‚Äì {t(lesson.get('endTime'))}\n"
                f"üë®‚Äçüè´ {lesson.get('teachers') or '-'}\n"
                f"üè´ {lesson.get('classrooms') or '-'}\n"
                f"üë• {lesson.get('groups') or '-'}\n"
            )
        text = "\n".join(parts)

    await callback.message.edit_text(
        text,
        reply_markup=get_days_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()




async def main():
    logger.info("Bot is starting polling...")
    bot = Bot(
        token=TOKEN,
        properties=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    await db.init()
    await cache.init()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î

    await dp.start_polling(bot)

def run():
    import asyncio
    logger.info("Starting bot...")
    load_dotenv()
    #print(getenv("BOT_TOKEN"))
    
    asyncio.run(main())
    


if __name__ == "__main__":
    run()
